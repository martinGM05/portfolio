---
import Layout from '../../layouts/Layout.astro';
import { useTranslations } from '../../i18n/utils';
import SectionHeader from '../../components/SectionHeader.astro';
import TechCard from '../../components/TechCard.astro';
import BackendTechCard from '../../components/BackendTechCard.astro';
import SpecialtyCard from '../../components/SpecialtyCard.astro';
import TimelineCard from '../../components/TimelineCard.astro';
import StatCard from '../../components/StatCard.astro';
import { sectionConfig, gridConfig } from '../../config/sections';
import { createTechData, createBackendTechData, createTimelineData, createSpecialtiesData, createStatsData } from '../../utils/dataHelpers';

const t = useTranslations('es');

const personalInfo = {
  name: "Martín González Miranda",
  title: "Senior Software Engineer",
  description: t('nav.description'),
  image: "/profile-photo.jpg",
  cv: "/MartinGonzalezMiranda_CV.pdf",
  social: {
    linkedin: "https://linkedin.com/in/martingonzalezmiranda",
    github: "https://github.com/martinGM05",
    email: "mtn.gm05@gmail.com"
  }
};

const stats = createStatsData(t, [
  { number: "4+", labelKey: 'stats.years_experience', icon: "🚀" },
  { number: "30%", labelKey: 'stats.performance_improvement', icon: "⚡" },
  { number: "25%", labelKey: 'stats.faster_delivery', icon: "🎯" },
  { number: "15+", labelKey: 'stats.successful_projects', icon: "✨" }
]);

const timeline = createTimelineData(t, [
  {
    yearKey: 'timeline.cyberpuerta.year',
    companyKey: 'timeline.cyberpuerta.company',
    roleKey: 'timeline.cyberpuerta.role',
    descriptionKey: 'timeline.cyberpuerta.description',
    achievementKey: 'timeline.cyberpuerta.achievement',
    color: "from-blue-500 to-purple-600",
    technologies: ["Nuxt.js", "Vue.js", "JavaScript", "Tailwind CSS", "Node.js", "AWS", "Docker"]
  },
  {
    yearKey: 'timeline.medio_melon.year',
    companyKey: 'timeline.medio_melon.company',
    roleKey: 'timeline.medio_melon.role',
    descriptionKey: 'timeline.medio_melon.description',
    achievementKey: 'timeline.medio_melon.achievement',
    color: "from-green-500 to-blue-600",
    technologies: ["React", "Next.js", "TypeScript", "Node.js", "Express.js", "MongoDB", "AWS", "Docker", "Kubernetes"]
  },
  {
    yearKey: 'timeline.capem.year',
    companyKey: 'timeline.capem.company',
    roleKey: 'timeline.capem.role',
    descriptionKey: 'timeline.capem.description',
    achievementKey: 'timeline.capem.achievement',
    color: "from-purple-500 to-pink-600",
    technologies: ["React", "TypeScript", "Storybook", "SASS", "Jest", "GitHub Actions"]
  },
  {
    yearKey: 'timeline.farmatin.year',
    companyKey: 'timeline.farmatin.company',
    roleKey: 'timeline.farmatin.role',
    descriptionKey: 'timeline.farmatin.description',
    achievementKey: 'timeline.farmatin.achievement',
    color: "from-orange-500 to-red-600",
    technologies: ["React", "Node.js", "Express.js", "MySQL", "Redis", "Docker", "Nginx"]
  }
]);

const frontendTech = createTechData([
  { name: "JavaScript", icon: "🟨", description: "ES6+, Async/Await, Modules" },
  { name: "TypeScript", icon: "🔵", description: "Type Safety, Interfaces, Generics" },
  { name: "React", icon: "⚛️", description: "Hooks, Context, Redux" },
  { name: "Vue.js", icon: "💚", description: "Composition API, Pinia, Nuxt" },
  { name: "Angular", icon: "🔴", description: "Components, Services, RxJS" },
  { name: "Next.js", icon: "⚫", description: "SSR, SSG, App Router" },
  { name: "Nuxt.js", icon: "💚", description: "Universal Apps, Modules" },
  { name: "Tailwind CSS", icon: "🎨", description: "Utility-first, Responsive" },
  { name: "SASS", icon: "💅", description: "Variables, Mixins, Functions" }
]);

const devopsTech = createTechData([
  { name: "Docker", icon: "🐳", description: "Containers, Images, Compose" },
  { name: "Kubernetes", icon: "☸️", description: "Orchestration, Pods, Services" },
  { name: "AWS", icon: "🟠", description: "EC2, S3, Lambda, RDS" },
  { name: "Azure", icon: "🔵", description: "App Service, Functions, CosmosDB" },
  { name: "Google Cloud", icon: "☁️", description: "Compute Engine, Cloud Functions" },
  { name: "Jenkins", icon: "🔧", description: "CI/CD, Pipelines, Automation" },
  { name: "GitHub Actions", icon: "⚡", description: "Workflows, Secrets, Deployments" },
  { name: "Terraform", icon: "🏗️", description: "Infrastructure as Code" },
  { name: "Nginx", icon: "🌐", description: "Reverse Proxy, Load Balancer" }
]);

const databaseTech = createTechData([
  { name: "MySQL", icon: "🐬", description: "Relational, ACID, Indexing" },
  { name: "PostgreSQL", icon: "🐘", description: "Advanced SQL, JSON, Extensions" },
  { name: "MongoDB", icon: "🍃", description: "NoSQL, Documents, Aggregation" },
  { name: "Redis", icon: "🔴", description: "Caching, Sessions, Pub/Sub" },
  { name: "Elasticsearch", icon: "🔍", description: "Search, Analytics, Logs" }
]);

const backendTech = createBackendTechData([
  {
    name: "Java",
    icon: "☕",
    category: "Backend",
    description: "Spring Boot, Spring Security, Maven",
    color: "from-orange-500 to-red-500"
  },
  {
    name: "Go",
    icon: "🐹",
    category: "Backend",
    description: "Gin, Echo, Gorilla Mux",
    color: "from-cyan-500 to-blue-500"
  },
  {
    name: "Python",
    icon: "🐍",
    category: "Backend",
    description: "Django, FastAPI, Flask",
    color: "from-yellow-500 to-orange-500"
  },
  {
    name: "C#",
    icon: "🔷",
    category: "Backend",
    description: ".NET Core, ASP.NET",
    color: "from-purple-500 to-indigo-500"
  },
  {
    name: "PHP",
    icon: "🐘",
    category: "Backend",
    description: "Laravel, Symfony, CodeIgniter",
    color: "from-blue-500 to-purple-500"
  },
  {
    name: "Rust",
    icon: "🦀",
    category: "Backend",
    description: "Actix, Rocket, Tokio",
    color: "from-red-500 to-orange-500"
  }
]);

const specialties = createSpecialtiesData(t, [
  {
    titleKey: 'specialties.performance.title',
    descriptionKey: 'specialties.performance.description',
    icon: "⚡",
    color: "bg-gradient-to-r from-yellow-400 to-orange-500"
  },
  {
    titleKey: 'specialties.leadership.title',
    descriptionKey: 'specialties.leadership.description',
    icon: "👥",
    color: "bg-gradient-to-r from-blue-500 to-purple-600"
  },
  {
    titleKey: 'specialties.fullstack.title',
    descriptionKey: 'specialties.fullstack.description',
    icon: "🚀",
    color: "bg-gradient-to-r from-green-500 to-blue-600"
  },
  {
    titleKey: 'specialties.technical.title',
    descriptionKey: 'specialties.technical.description',
    icon: "☁️",
    color: "bg-gradient-to-r from-purple-500 to-pink-600"
  }
]);
---

<Layout>
  <!-- Navigation -->
  <nav class="fixed top-0 w-full bg-primary/95 backdrop-blur-md z-50 border-b border-orange-200 dark:border-gray-700">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex justify-between items-center h-16">
        <!-- Logo -->
        <div class="text-xl font-bold gradient-text">
          {personalInfo.name.split(' ')[0] + " " + personalInfo.name.split(' ')[1]}
        </div>
        
        <!-- Desktop Menu -->
        <div class="hidden md:flex items-center space-x-8">
          <div class="flex space-x-6">
            <a href="#about" class="text-gray-700 dark:text-gray-300 hover:text-orange-600 dark:hover:text-orange-400 transition-colors font-semibold">{t('nav.home')}</a>
            <a href="#specialties" class="text-gray-700 dark:text-gray-300 hover:text-orange-600 dark:hover:text-orange-400 transition-colors font-semibold">{t('nav.specialties')}</a>
            <a href="#frontend" class="text-gray-700 dark:text-gray-300 hover:text-orange-600 dark:hover:text-orange-400 transition-colors font-semibold">{t('nav.frontend')}</a>
            <a href="#timeline" class="text-gray-700 dark:text-gray-300 hover:text-orange-600 dark:hover:text-orange-400 transition-colors font-semibold">{t('nav.experience')}</a>
            <a href="#contact" class="text-gray-700 dark:text-gray-300 hover:text-orange-600 dark:hover:text-orange-400 transition-colors font-semibold">{t('nav.contact')}</a>
          </div>
          
          <!-- Language Selector -->
          <div class="flex items-center bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-full p-1 border border-orange-200 dark:border-gray-600">
            <a href="/es/" class="px-3 py-1 rounded-full text-sm font-semibold bg-orange-500 text-white shadow-sm">ES</a>
            <a href="/en/" class="px-3 py-1 rounded-full text-sm font-semibold text-orange-600 dark:text-orange-400 hover:bg-orange-100 dark:hover:bg-gray-700 transition-colors">EN</a>
          </div>
          
          <!-- Theme Toggle -->
          <button id="theme-toggle" class="p-2 rounded-lg bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-orange-200 dark:border-gray-600 text-orange-600 dark:text-orange-400 hover:bg-orange-100 dark:hover:bg-gray-700 transition-colors cursor-pointer">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/>
            </svg>
          </button>
        </div>
        
        <!-- Mobile Menu Button -->
        <div class="md:hidden flex items-center space-x-4">
          <!-- Language Selector Mobile -->
          <div class="flex items-center bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-full p-1 border border-orange-200 dark:border-gray-600">
            <a href="/es/" class="px-2 py-1 rounded-full text-xs font-semibold bg-orange-500 text-white">ES</a>
            <a href="/en/" class="px-2 py-1 rounded-full text-xs font-semibold text-orange-600 dark:text-orange-400">EN</a>
          </div>
          
          <!-- Theme Toggle Mobile -->
          <button id="theme-toggle" class="p-2 rounded-lg bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border border-orange-200 dark:border-gray-600 text-orange-600 dark:text-orange-400">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"/>
            </svg>
          </button>
          
          <!-- Mobile Menu Button -->
          <button id="mobile-menu-button" class="text-orange-600 dark:text-orange-400 hover:text-orange-700 dark:hover:text-orange-300">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
        </div>
      </div>
    </div>
  </nav>

  <!-- Hero Section -->
  <section id="about" class="min-h-screen flex items-center justify-center pt-16 relative overflow-hidden">
    <!-- Background Elements -->
    <div class="absolute inset-0 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 dark:from-slate-900 dark:via-blue-900/20 dark:to-indigo-900/20"></div>
    <div class="absolute top-20 left-10 w-72 h-72 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full mix-blend-multiply filter blur-xl opacity-10 animate-pulse dark:opacity-10"></div>
    <div class="absolute top-40 right-10 w-72 h-72 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full mix-blend-multiply filter blur-xl opacity-10 animate-pulse dark:opacity-10"></div>
    <div class="absolute bottom-20 left-1/2 w-72 h-72 bg-gradient-to-r from-purple-500 to-pink-600 rounded-full mix-blend-multiply filter blur-xl opacity-10 animate-pulse dark:opacity-10"></div>
    
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20 relative z-10">
      <div class="text-center">
        <!-- Profile Image -->
        <div class="mb-12 animate-fade-in-up">
          <div class="relative inline-block">
            <div class="w-64 h-64 rounded-full overflow-hidden shadow-2xl ring-4 ring-white dark:ring-slate-800 mx-auto">
              <img 
                src={personalInfo.image} 
                alt={personalInfo.name}
                class="w-full h-full object-cover"
                loading="eager"
              />
            </div>
            <!-- Floating Elements -->
            <div class="absolute -top-4 -right-4 w-16 h-16 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white text-xl font-bold shadow-lg animate-bounce">
              🚀
            </div>
            <div class="absolute -bottom-4 -left-4 w-20 h-20 bg-gradient-to-r from-cyan-500 to-blue-600 rounded-full flex items-center justify-center text-white text-2xl font-bold shadow-lg animate-bounce" style="animation-delay: 0.5s;">
              ⚡
            </div>
            <div class="absolute top-1/2 -right-8 w-14 h-14 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white text-lg font-bold shadow-lg animate-bounce" style="animation-delay: 1s;">
              💻
            </div>
          </div>
        </div>

        <!-- Content -->
        <div class="max-w-4xl mx-auto">
          <div class="mb-6">
            <span class="inline-block px-6 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-full text-lg font-semibold mb-6">
              👋 {t('hero.greeting')}
            </span>
          </div>
          
          <h1 class="text-6xl lg:text-8xl font-bold text-primary mb-6 leading-tight">
            <span class="gradient-text">{personalInfo.name.split(' ')[0]}</span>
          </h1>
          
          <h2 class="text-3xl lg:text-4xl text-secondary mb-8 font-light">
            {personalInfo.title}
          </h2>
          
          <p class="text-xl text-secondary mb-12 leading-relaxed max-w-3xl mx-auto">
            {personalInfo.description}
          </p>
          
          <!-- Stats Grid -->
          <div class={`grid ${gridConfig.stats} gap-6 mb-12 max-w-4xl mx-auto`}>
            {stats.map((stat) => (
              <StatCard stat={stat} />
            ))}
          </div>
          
          <!-- Social Links & CV -->
          <div class="flex flex-wrap justify-center gap-6">
            <a 
              href={personalInfo.social.linkedin}
              target="_blank"
              rel="noopener noreferrer"
              class="flex items-center px-8 py-4 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-full hover:from-blue-700 hover:to-blue-800 transition-all hover-lift shadow-lg"
            >
              <svg class="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
              LinkedIn
            </a>
            <a 
              href={personalInfo.social.github}
              target="_blank"
              rel="noopener noreferrer"
              class="flex items-center px-8 py-4 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-full hover:from-indigo-700 hover:to-purple-700 transition-all hover-lift shadow-lg"
            >
              <svg class="w-6 h-6 mr-3" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
              </svg>
              GitHub
            </a>
            <a 
              href={personalInfo.cv}
              target="_blank"
              rel="noopener noreferrer"
              class="flex items-center px-8 py-4 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-full hover:from-purple-700 hover:to-pink-700 transition-all hover-lift shadow-lg"
            >
              <svg class="w-6 h-6 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
              </svg>
{t('hero.download_cv')}
            </a>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Specialties Section -->
  <section id="specialties" class="py-32 bg-section">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <SectionHeader 
        badge={t('specialties.badge')}
        title={t('specialties.title')}
        titleHighlight={t('specialties.title_highlight')}
        subtitle={t('specialties.subtitle')}
        badgeIcon="✨"
        gradientFrom={sectionConfig.specialties.gradientFrom}
        gradientTo={sectionConfig.specialties.gradientTo}
      />

      <div class={`grid ${gridConfig.specialties} gap-12`}>
        {specialties.map((specialty) => (
          <SpecialtyCard specialty={specialty} />
        ))}
      </div>
    </div>
  </section>

  <!-- Stats Highlight Section -->
  <section class="py-24 bg-gradient-to-r from-blue-100 via-indigo-100 to-purple-100 dark:from-orange-400 dark:via-pink-500 dark:to-purple-600 relative overflow-hidden">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10">
      <div class="text-center mb-16">
        <h2 class="text-5xl lg:text-6xl font-bold text-gray-800 dark:text-white mb-4">
          {t('stats_highlight.title')} <span class="text-blue-600 dark:text-yellow-300">{t('stats_highlight.title_highlight')}</span>
        </h2>
        <p class="text-xl text-gray-600 dark:text-white/90 max-w-3xl mx-auto">
          {t('stats_highlight.subtitle')}
        </p>
      </div>
      
      <div class={`grid ${gridConfig.statsHighlight} gap-8`}>
        {stats.map((stat) => (
          <StatCard stat={stat} isHighlight={true} />
        ))}
      </div>
    </div>
  </section>

  <!-- Separator -->
  <div class="section-separator"></div>

  <!-- Frontend Technologies Section -->
  <section id="frontend" class="py-32 bg-section">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <SectionHeader 
        badge={t('frontend.badge')}
        title={t('frontend.title')}
        titleHighlight={t('frontend.title_highlight')}
        titleEnd={t('frontend.title_end')}
        subtitle={t('frontend.subtitle')}
        badgeIcon="🎨"
        gradientFrom={sectionConfig.frontend.gradientFrom}
        gradientTo={sectionConfig.frontend.gradientTo}
      />

      <div class={`grid ${gridConfig.frontend} gap-8`}>
        {frontendTech.map((tech) => (
          <TechCard 
            tech={tech} 
            gradientFrom={sectionConfig.frontend.gradientFrom}
            gradientTo={sectionConfig.frontend.gradientTo}
            hoverBorderFrom={sectionConfig.frontend.hoverBorderFrom}
            hoverBorderTo={sectionConfig.frontend.hoverBorderTo}
            backgroundFrom={sectionConfig.frontend.backgroundFrom}
            backgroundTo={sectionConfig.frontend.backgroundTo}
            backgroundDarkFrom={sectionConfig.frontend.backgroundDarkFrom}
            backgroundDarkTo={sectionConfig.frontend.backgroundDarkTo}
          />
        ))}
      </div>
    </div>
  </section>

  <!-- Separator -->
  <div class="section-separator"></div>

  <!-- Backend Technologies Section -->
  <section id="backend" class="py-32 bg-section">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <SectionHeader 
        badge={t('backend.badge')}
        title={t('backend.title')}
        titleHighlight={t('backend.title_highlight')}
        titleEnd={t('backend.title_end')}
        subtitle={t('backend.subtitle')}
        badgeIcon="⚙️"
        gradientFrom={sectionConfig.backend.gradientFrom}
        gradientTo={sectionConfig.backend.gradientTo}
      />

      <div class={`grid ${gridConfig.backend} gap-10`}>
        {backendTech.map((tech, index) => (
          <BackendTechCard 
            tech={tech} 
            index={index}
            gradientFrom={sectionConfig.backend.gradientFrom}
            gradientTo={sectionConfig.backend.gradientTo}
            hoverBorderFrom={sectionConfig.backend.hoverBorderFrom}
            hoverBorderTo={sectionConfig.backend.hoverBorderTo}
            backgroundFrom={sectionConfig.backend.backgroundFrom}
            backgroundTo={sectionConfig.backend.backgroundTo}
            backgroundDarkFrom={sectionConfig.backend.backgroundDarkFrom}
            backgroundDarkTo={sectionConfig.backend.backgroundDarkTo}
            experienceText={t('backend.experience')}
          />
        ))}
      </div>
    </div>
  </section>

  <!-- Separator -->
  <div class="section-separator"></div>

  <!-- DevOps Technologies Section -->
  <section id="devops" class="py-32 bg-section">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <SectionHeader 
        badge={t('devops.badge')}
        title={t('devops.title')}
        titleHighlight={t('devops.title_highlight')}
        titleEnd={t('devops.title_end')}
        subtitle={t('devops.subtitle')}
        badgeIcon="⚙️"
        gradientFrom={sectionConfig.devops.gradientFrom}
        gradientTo={sectionConfig.devops.gradientTo}
      />

      <div class={`grid ${gridConfig.devops} gap-8`}>
        {devopsTech.map((tech) => (
          <TechCard 
            tech={tech} 
            gradientFrom={sectionConfig.devops.gradientFrom}
            gradientTo={sectionConfig.devops.gradientTo}
            hoverBorderFrom={sectionConfig.devops.hoverBorderFrom}
            hoverBorderTo={sectionConfig.devops.hoverBorderTo}
            backgroundFrom={sectionConfig.devops.backgroundFrom}
            backgroundTo={sectionConfig.devops.backgroundTo}
            backgroundDarkFrom={sectionConfig.devops.backgroundDarkFrom}
            backgroundDarkTo={sectionConfig.devops.backgroundDarkTo}
          />
        ))}
      </div>
    </div>
  </section>

  <!-- Separator -->
  <div class="section-separator"></div>

  <!-- Database Technologies Section -->
  <section id="database" class="py-32 bg-section">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <SectionHeader 
        badge={t('database.badge')}
        title={t('database.title')}
        titleHighlight={t('database.title_highlight')}
        titleEnd={t('database.title_end')}
        subtitle={t('database.subtitle')}
        badgeIcon="🗄️"
        gradientFrom={sectionConfig.database.gradientFrom}
        gradientTo={sectionConfig.database.gradientTo}
      />

      <div class={`grid ${gridConfig.database} gap-8`}>
        {databaseTech.map((tech) => (
          <TechCard 
            tech={tech} 
            gradientFrom={sectionConfig.database.gradientFrom}
            gradientTo={sectionConfig.database.gradientTo}
            hoverBorderFrom={sectionConfig.database.hoverBorderFrom}
            hoverBorderTo={sectionConfig.database.hoverBorderTo}
            backgroundFrom={sectionConfig.database.backgroundFrom}
            backgroundTo={sectionConfig.database.backgroundTo}
            backgroundDarkFrom={sectionConfig.database.backgroundDarkFrom}
            backgroundDarkTo={sectionConfig.database.backgroundDarkTo}
          />
        ))}
      </div>
    </div>
  </section>

  <!-- Separator -->
  <div class="section-separator"></div>

  <!-- Timeline Section -->
  <section id="timeline" class="py-32 bg-section">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <SectionHeader 
        badge={t('timeline.badge')}
        title={t('timeline.title')}
        titleHighlight={t('timeline.title_highlight')}
        titleEnd={t('timeline.title_end')}
        subtitle={t('timeline.subtitle')}
        badgeIcon="🚀"
        gradientFrom="from-blue-500"
        gradientTo="to-indigo-600"
      />

      <div class="max-w-4xl mx-auto">
        {timeline.map((item, index) => (
          <TimelineCard 
            item={item} 
            index={index} 
            technologiesUsedText={t('timeline.technologies_used')} 
          />
        ))}
      </div>
    </div>
  </section>

  <!-- Contact Section -->
  <section id="contact" class="py-32 bg-gradient-to-r from-blue-100 via-indigo-100 to-purple-100 dark:from-rose-400 dark:via-pink-500 dark:to-purple-600 relative overflow-hidden">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center relative z-10">
      <div class="mb-16">
        <div class="inline-block px-8 py-4 bg-badge backdrop-blur-sm rounded-full text-xl font-semibold mb-8">
          💬 {t('contact.badge')}
        </div>
        <h2 class="text-6xl lg:text-8xl font-bold text-gray-800 dark:text-white mb-8">
          {t('contact.title')} <span class="text-blue-600 dark:text-yellow-300">{t('contact.title_highlight')}</span>{t('contact.title_end')}
        </h2>
        <p class="text-2xl text-gray-600 dark:text-white/90 max-w-4xl mx-auto leading-relaxed mb-12">
          {t('contact.subtitle')}
        </p>
      </div>
      
      <div class="flex flex-wrap justify-center gap-8 mb-16">
        <a 
          href={`mailto:${personalInfo.social.email}`}
          class="group flex items-center px-12 py-6 bg-white text-blue-600 dark:text-pink-400 rounded-full text-xl font-semibold hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-300 hover-lift shadow-2xl"
        >
          <svg class="w-8 h-8 mr-4 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
          </svg>
{t('contact.send_email')}
        </a>
        
        <a 
          href={personalInfo.social.linkedin}
          target="_blank"
          rel="noopener noreferrer"
          class="group flex items-center px-12 py-6 bg-button backdrop-blur-sm rounded-full text-xl font-semibold hover:bg-blue-200 dark:hover:bg-white/20 transition-all duration-300 hover-lift"
        >
          <svg class="w-8 h-8 mr-4 group-hover:scale-110 transition-transform duration-300" fill="currentColor" viewBox="0 0 24 24">
            <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
          </svg>
          LinkedIn
        </a>
      </div>
      
      <div class="text-gray-600 dark:text-white/80 text-lg">
        <p>✨ {t('contact.available')}</p>
      </div>
    </div>
  </section>

  <!-- Footer -->
  <footer class="bg-footer text-white py-8">
    <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex flex-col md:flex-row justify-between items-center">
        <div class="mb-4 md:mb-0">
          <p>&copy; 2024 {personalInfo.name}. {t('footer.rights')}</p>
        </div>
        <div class="flex space-x-6">
          <a href={personalInfo.social.linkedin} target="_blank" rel="noopener noreferrer" class="text-slate-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
            </svg>
          </a>
          <a href={personalInfo.social.github} target="_blank" rel="noopener noreferrer" class="text-slate-400 hover:text-white transition-colors">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </footer>

  <!-- Mobile Menu Script -->
  <script define:vars={{ navHome: t('nav.home'), navSpecialties: t('nav.specialties'), navFrontend: t('nav.frontend'), navBackend: t('nav.backend'), navDevops: t('nav.devops'), navExperience: t('nav.experience'), navContact: t('nav.contact') }}>
    document.addEventListener('DOMContentLoaded', function() {
      const mobileMenuButton = document.getElementById('mobile-menu-button');
      if (!mobileMenuButton) return;
      
      const mobileMenu = document.createElement('div');
      mobileMenu.id = 'mobile-menu';
      mobileMenu.className = 'hidden md:hidden bg-mobile border-t border-primary dark:border-gray-700';
      mobileMenu.innerHTML = `
        <div class="px-4 py-2 space-y-2">
          <a href="#about" class="block py-2 text-secondary hover:text-accent-primary transition-colors">${navHome}</a>
          <a href="#specialties" class="block py-2 text-secondary hover:text-accent-primary transition-colors">${navSpecialties}</a>
          <a href="#frontend" class="block py-2 text-secondary hover:text-accent-primary transition-colors">${navFrontend}</a>
          <a href="#backend" class="block py-2 text-secondary hover:text-accent-primary transition-colors">${navBackend}</a>
          <a href="#devops" class="block py-2 text-secondary hover:text-accent-primary transition-colors">${navDevops}</a>
          <a href="#timeline" class="block py-2 text-secondary hover:text-accent-primary transition-colors">${navExperience}</a>
          <a href="#contact" class="block py-2 text-secondary hover:text-accent-primary transition-colors">${navContact}</a>
	</div>
      `;
      
      const parentContainer = mobileMenuButton.parentNode?.parentNode;
      if (parentContainer) {
        parentContainer.appendChild(mobileMenu);
      }
      
      mobileMenuButton.addEventListener('click', function() {
        mobileMenu.classList.toggle('hidden');
      });
      
      // Close mobile menu when clicking on links
      mobileMenu.addEventListener('click', function(e) {
        const target = e.target;
        if (target && target.tagName === 'A') {
          mobileMenu.classList.add('hidden');
        }
      });
    });
  </script>
</Layout>
